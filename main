function turn(right)
    if right then
        turtle.turnRight()
    else
        turtle.turnLeft()
    end
end

function rotate()
    turtle.turnRight()
    turtle.turnRight()
end

function tryRefuel()
    local result = true;
    if turtle.getItemCount(1) <= 1 then
        result = false
    else
        if turtle.getFuelLevel() < 80 then
            turtle.select(1)
            turtle.refuel(1)
        end
    end
    return result;
end

function putfakel()
    for i=2,4,1 do
        if turtle.getItemCount(i) > 1 then
            turtle.select(i)
            turtle.placeUp()
            break
        end
    end
end

function stepForward()
    tryRefuel()
    while turtle.forward() == false do
        turtle.dig()
    end
end

function stepUp()
    tryRefuel()
    while turtle.up() == false do
        turtle.digUp()
    end
end

function stepDown()
    tryRefuel()
    while turtle.down() == false do
        turtle.digDown()
    end
end

function moveForward(count)
    for i=1,count,1 do
        stepForward()
    end
end

function moveUp(count)
    for i=1,count,1 do
        stepUp()
    end
end

function moveDown(count)
    for i=1,count,1 do
        stepDown()
    end
end

function move(x,y,z)
    if z > 0 then
        moveUp(z)
    else
        moveDown(-z)
    end
    if x > 0 then
        turtle.turnRight()
        moveForward(x)
    else
        turtle.turnLeft()
        moveForward(-x)
    end
    if x > 0 then
        turtle.turnLeft()
    else
        turtle.turnRight()
    end
    if y < 0 then
        rotate()
        moveForward(-y)
    else
        moveForward(y)
    end
    if y < 0 then
        rotate()
    end
end

function hDigRound()
    for i=1,4,1 do
        turtle.dig()
        turtle.turnRight()
    end
end

function detectWith(firts_item, end_item)
    for i=first_item, end_item, 1 do
        turtle.select(i)
        if turtle.compare() then
            return false
        end
    end
    return true
end

function hFilterDigRound(first_item, end_item)
    for i=1,4,1 do
        if detectWith(first_item, end_item) then
            turtle.dig()
        end
        turtle.turnRight()
    end
end

function vDigRound()
    turtle.digDown()
    turtle.turnRight()
    turtle.dig()
    rotate()
    turtle.dig()
    turtle.turnRight()
    turtle.digUp()
end

function selectNoEmpty(first_item, end_item)
    for i=first_item,end_item,1 do
        if turtle.getItemCount(i) > 1 then
            turtle.select(i)
            return true
        end
    end
    return false
end

function clearRangeInInventory(first_item, end_item)
    local result = true
    turtle.turnLeft()
    for i=first_item,end_item,1 do
        if turtle.getItemCount(i) ~= 0 then
            turtle.select(i)
            if turtle.drop() == false then
                result = false
                break
            end
        end
    end
    turtle.turnRight()
    return result
end

function clear()
    return clearRangeInInventory(2,16)
end

function clearTunnel(lenght)
    for i=0,lenght-1,1 do
        stepForward()
        turtle.digDown()
    end
end

function tunnel(lenght)
    for i=0,lenght-1,1 do
        stepForward()
        turtle.digDown()
        if i % 8 == 0 then
            putfakel()
        end
    end
end

function go(lenght)
    for i=1,lenght,1 do
        stepForward()
    end
end

